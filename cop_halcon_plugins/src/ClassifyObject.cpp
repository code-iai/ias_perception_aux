///////////////////////////////////////////////////////////////////////////////
//  File generated by HDevelop for HALCON/C++ Version 9.0
///////////////////////////////////////////////////////////////////////////////



#include "cpp/HalconCpp.h"
#include "HCPPdescr_class.h"



// Procedure declarations
void classify_object (Halcon::Hobject Region, Halcon::Hobject Image,
    Halcon::HTuple DescriptorHandle, Halcon::HTuple SVMHandle, Halcon::HTuple *Class, double &score);
// Procedures
void classify_object (Halcon::Hobject Region, Halcon::Hobject Image,
    Halcon::HTuple DescriptorHandle, Halcon::HTuple SVMHandle, Halcon::HTuple *Class, double &score)
{
  using namespace Halcon;

  // Local iconic variables
  Hobject  ImageReduced;


  // Local control variables
  HTuple  Area, Row, Column, ClassDescriptorSource;
  HTuple  RowDescriptorTarget, ColDescriptorTarget, Histo;
  HTuple  Index2;

  (*Class) = -1;
  area_center(Region, &Area, &Row, &Column);
  if (Area==0)
  {
    return;
  }
  reduce_domain(Image, Region, &ImageReduced);
  classify_descriptor_points(ImageReduced, DescriptorHandle, 2, &ClassDescriptorSource,
      &RowDescriptorTarget, &ColDescriptorTarget);
  score = 0.0;
  if(ClassDescriptorSource.Num() < 80)
    return;
  score = MAX(ClassDescriptorSource.Num() / 500, 1.0);
  tuple_gen_const(500, 0, &Histo);
  for (Index2=0; Index2<ClassDescriptorSource.Num(); Index2+=1)
  {
    Histo[HTuple(ClassDescriptorSource[Index2])] = HTuple(Histo[HTuple(ClassDescriptorSource[Index2])])+1;
  }
  if ((ClassDescriptorSource.Num())==0)
  {
    return;
  }
  Histo = 1.0*Histo;
  Histo = Histo/(ClassDescriptorSource.Num());
  try
  {
    classify_class_svm(SVMHandle, Histo, 1, &(*Class));
  }
  catch(HException ex)
  {
    printf("Error in classify_class_svm: %s\n", ex.message);
  }
  return;
}


